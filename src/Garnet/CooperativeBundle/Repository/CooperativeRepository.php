<?php

namespace Garnet\CooperativeBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CooperativeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CooperativeRepository extends EntityRepository
{

    /**
     * Lister 10 compte connecter dernier
     */
    public function getByDernierConnecte(){
        $result = $this->findBy(array(), array('dateDerniereConnexion'=> 'DESC'), 10);

        return $result;
    }

    public function getTrajetByCooperative($idCooperative){
        $_query = "SELECT t.ID_VILLE, v.NOM_VILLE FROM trajet t INNER JOIN VILLE v ON t.ID_VILLE = v.ID_VILLE WHERE t.ID_COOPERATIVE = $idCooperative";
        $stmt = $this->getEntityManager()->getConnection()->prepare($_query);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    /**
     * Chercher une voyage avec ligne intermediaire
     * @param string $dateVoyage
     * @param int $place
     * @param int $depart
     * @param int $arrive
     * @param int $frais_minimum
     * @param int $frais_maximum
     * @return array
     */
    public function rechercheCooperative($dateVoyage = '', $place = '', $depart = '', $arrive = '', $frais_minimum = '', $frais_maximum = ''){
        $connexion = $this->getEntityManager()->getConnection();
        $_fields = " c.NOM, v1.DATE_VOYAGE, v1.FRAIS, v1.NBR_PLACE, d.NOM_VILLE AS DEPART, a.NOM_VILLE AS ARRIVE ";
        $_join = "INNER JOIN cooperative c ON v1.ID_COOPERATIVE = c.ID_COOPERATIVE
            INNER JOIN ville d ON d.ID_VILLE = v1.DEPART
            INNER JOIN ville a ON a.ID_VILLE = v1.ARRIVE ";
        $_where = "WHERE ";

        if($dateVoyage != ''){
            $dateVoyage = new \DateTime($dateVoyage);
            $date = $dateVoyage->format('Y-m-d');
            $_where .=  "DATE_VOYAGE LIKE '$date%'";
        }
        if($place != ''){
            $_where .= $_where != "WHERE " ? " AND v1.NBR_PLACE >= '$place'" : " v1.NBR_PLACE >= '$place'";
        }
        if($depart != ''){
            $_where .= $_where != "WHERE " ? " AND v1.DEPART = '$depart'" : " v1.DEPART = '$depart'";
        }
        if($arrive != ''){
            $_where .= $_where != "WHERE " ? " AND v1.ARRIVE = '$arrive'" : " v1.ARRIVE = '$arrive'";
        }

        $_query = "SELECT " . $_fields . " FROM voyages v1 " . $_join;
        if($_where != "WHERE "){
            $_query .= $_where;
        }
        $_query .= " LIMIT 10";


        $stmt = $connexion->prepare($_query);
        $stmt->execute();
        $result = $stmt->fetchAll();

        return $result;
    }


    /**
     * @param string $dateVoyage
     * @param int $place
     * @param int $depart
     * @param int $arrive
     * @param int $frais_minimum
     * @param int $frais_maximum
     * @return array
     */
    public function rechercheMultiple($dateVoyage = '', $place = 0, $depart = 0, $arrive = 0, $frais_minimum = 0, $frais_maximum = 0){
        $connexion = $this->getEntityManager()->getConnection();
        $_query = "SELECT v1.*, v2.* FROM voyages v1
            INNER JOIN voyages v2 ON v2.DEPART =v1.ARRIVE
             WHERE v1.DEPART = 2 AND v2.ARRIVE = 10";

        $stmt = $connexion->prepare($_query);

        $result = $stmt->fetchAll();

        return $result;
    }
}
